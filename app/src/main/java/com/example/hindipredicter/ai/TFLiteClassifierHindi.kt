package com.example.hindipredicter.ai

import android.content.Context
import org.tensorflow.lite.Interpreter
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.channels.FileChannel

class TFLiteClassifierHindi(context: Context) {
    private var interpreter: Interpreter
    private val inputSize = 218
    private val outputSize = 50 // number of classes

    // Paste from Python
    private val featureMeans = floatArrayOf(29.385545f, 26.423469f, 40.066676f, 41.154181f, 17.823848f, 38.950457f, 16.855860f, 13.559356f, 40.870274f, 11.752088f, 24.922912f, 23.508308f, 22.887872f, 25.734373f, 18.687978f, 17.533063f, 18.532551f, 19.148888f, 29.137921f, 27.998181f, 26.328605f, 24.731260f, 23.408654f, 22.372776f, 21.684144f, 21.261172f, 21.061451f, 20.963371f, 20.889246f, 20.795707f, 20.661816f, 20.509699f, 20.268787f, 19.999790f, 19.725722f, 19.439422f, 19.171916f, 18.924128f, 18.694362f, 18.486445f, 18.317351f, 18.179419f, 18.006767f, 17.855048f, 17.692613f, 17.454261f, 17.288489f, 17.132813f, 16.890586f, 16.728071f, 16.501827f, 16.279486f, 16.130674f, 15.981449f, 15.920268f, 15.874952f, 15.817052f, 15.790896f, 15.700858f, 15.690658f, 15.638483f, 15.646099f, 15.692616f, 15.736081f, 15.742270f, 15.771706f, 15.830380f, 15.876410f, 15.898511f, 16.002770f, 16.114067f, 16.206698f, 16.357575f, 16.545776f, 16.736756f, 16.886581f, 17.042132f, 17.203787f, 17.337718f, 17.475337f, 17.521986f, 17.579955f, 17.616021f, 17.651031f, 17.769321f, 17.824869f, 17.891472f, 18.000036f, 18.129880f, 18.250454f, 18.316725f, 18.411945f, 18.503554f, 18.628133f, 18.802007f, 18.904415f, 19.029311f, 19.053479f, 19.152284f, 19.116168f, 19.189384f, 19.230096f, 19.338597f, 19.370745f, 19.383779f, 19.484825f, 19.609977f, 19.774047f, 20.088864f, 20.472973f, 21.003263f, 21.632692f, 22.351610f, 23.095405f, 23.872056f, 24.507747f, 25.066636f, 25.380196f, 0.000000f, 2.199412f, 5.335361f, 8.689157f, 11.945062f, 14.994849f, 17.811879f, 20.298344f, 22.511969f, 24.399474f, 25.840816f, 26.991880f, 27.797457f, 28.528277f, 29.031766f, 29.435355f, 29.739517f, 29.995544f, 30.178772f, 30.378058f, 30.489528f, 30.680237f, 30.750805f, 30.840583f, 30.895707f, 30.996896f, 31.145046f, 31.219632f, 31.363522f, 31.472914f, 31.509955f, 31.700616f, 31.816633f, 31.840161f, 31.961669f, 32.070171f, 32.243525f, 32.321653f, 32.453165f, 32.637986f, 32.687864f, 32.844298f, 33.007299f, 33.179785f, 33.515232f, 33.810757f, 34.107670f, 34.477308f, 34.802222f, 35.180010f, 35.447158f, 35.844408f, 36.130905f, 36.343728f, 36.675319f, 36.987225f, 37.257679f, 37.492763f, 37.661951f, 37.773275f, 37.882709f, 37.954045f, 37.919383f, 37.844366f, 37.852130f, 37.836633f, 37.892925f, 37.965169f, 37.987433f, 38.060989f, 38.112729f, 38.147867f, 38.169534f, 38.088553f, 38.023600f, 37.922789f, 37.820104f, 37.686087f, 37.378532f, 36.992597f, 36.609133f, 36.153072f, 35.739202f, 35.289906f, 35.014353f, 34.628708f, 34.360873f, 34.241363f, 34.113533f, 34.140385f, 34.527094f, 34.937140f, 35.483810f, 36.122399f, 36.851822f, 37.647569f, 38.453965f, 39.147339f, 39.725297f, 40.022083f)
    private val featureStds = floatArrayOf(7.302561f, 6.214720f, 9.409091f, 8.441800f, 6.698373f, 8.819344f, 6.118742f, 5.849622f, 9.387058f, 5.735773f, 8.097933f, 7.358746f, 7.498576f, 7.397052f, 4.771516f, 4.718730f, 4.770880f, 4.711990f, 8.371494f, 8.059735f, 7.809298f, 7.637858f, 7.500721f, 7.487681f, 7.571387f, 7.765364f, 7.964768f, 8.112362f, 8.210642f, 8.247849f, 8.269365f, 8.283501f, 8.254207f, 8.193485f, 8.137286f, 8.096056f, 8.073716f, 8.088984f, 8.110319f, 8.129273f, 8.087245f, 8.122265f, 8.098240f, 8.184374f, 8.247526f, 8.238275f, 8.283913f, 8.309095f, 8.300472f, 8.367434f, 8.393069f, 8.438273f, 8.515018f, 8.576811f, 8.661383f, 8.718289f, 8.733820f, 8.745538f, 8.664887f, 8.628824f, 8.538147f, 8.505599f, 8.443817f, 8.361356f, 8.298481f, 8.310852f, 8.309527f, 8.263793f, 8.128362f, 8.071529f, 8.037091f, 7.970103f, 7.925329f, 7.886066f, 7.889633f, 7.904989f, 7.948513f, 8.012088f, 8.080190f, 8.142381f, 8.206754f, 8.306828f, 8.389270f, 8.510886f, 8.643644f, 8.734106f, 8.801204f, 8.872734f, 8.995463f, 9.091878f, 9.194325f, 9.240317f, 9.328230f, 9.401334f, 9.515741f, 9.561188f, 9.601921f, 9.623428f, 9.690391f, 9.661676f, 9.703421f, 9.757919f, 9.801710f, 9.805303f, 9.755889f, 9.755022f, 9.697744f, 9.667297f, 9.764217f, 9.915352f, 10.166083f, 10.464815f, 10.824443f, 11.285615f, 11.753819f, 12.170292f, 12.478289f, 12.746938f, 1.000000f, 3.552809f, 5.430655f, 7.140200f, 8.595935f, 9.866851f, 11.034176f, 12.016683f, 12.825858f, 13.462919f, 13.865408f, 14.141463f, 14.311591f, 14.461407f, 14.531816f, 14.599402f, 14.645515f, 14.676759f, 14.708732f, 14.731543f, 14.735180f, 14.727980f, 14.717419f, 14.709505f, 14.629389f, 14.621781f, 14.558048f, 14.417115f, 14.256484f, 14.116417f, 13.886646f, 13.690978f, 13.453136f, 13.244621f, 13.129273f, 13.009216f, 12.939235f, 12.892808f, 12.823925f, 12.802207f, 12.709755f, 12.688868f, 12.615678f, 12.572709f, 12.556491f, 12.544713f, 12.505082f, 12.501403f, 12.510903f, 12.490391f, 12.434620f, 12.433217f, 12.488723f, 12.541073f, 12.558122f, 12.620892f, 12.745844f, 12.809663f, 12.937936f, 13.169009f, 13.356869f, 13.543608f, 13.807490f, 14.091079f, 14.237486f, 14.465321f, 14.637935f, 14.820615f, 14.999362f, 15.139917f, 15.327739f, 15.530819f, 15.803489f, 16.049033f, 16.292969f, 16.517124f, 16.780748f, 17.084261f, 17.406161f, 17.735226f, 18.097416f, 18.400276f, 18.711123f, 19.066404f, 19.332654f, 19.575461f, 19.750814f, 19.901644f, 20.028953f, 20.058893f, 20.154394f, 20.239447f, 20.285714f, 20.331393f, 20.411245f, 20.532285f, 20.704460f, 20.908433f, 21.049700f, 21.196809f)

    init {
        val assetFileDescriptor = context.assets.openFd("model_hindi.tflite")
        val fileInputStream = assetFileDescriptor.createInputStream()
        val fileChannel = fileInputStream.channel
        val startOffset = assetFileDescriptor.startOffset
        val declaredLength = assetFileDescriptor.declaredLength
        val modelBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)

        interpreter = Interpreter(modelBuffer)

    }

    private fun standardize(input: FloatArray): FloatArray {
        return FloatArray(input.size) { i ->
            (input[i] - featureMeans[i]) / featureStds[i]
        }
    }

    fun predict(input: List<Double>): Int {
        require(input.size == inputSize)

        val floatInput = input.map { it.toFloat() }.toFloatArray()
        val standardizedInput = standardize(floatInput)

        val inputBuffer = ByteBuffer.allocateDirect(4 * inputSize).order(ByteOrder.nativeOrder())
        standardizedInput.forEach { inputBuffer.putFloat(it) }

        val output = Array(1) { FloatArray(outputSize) }
        interpreter.run(inputBuffer, output)

        return output[0].indices.maxByOrNull { output[0][it] } ?: -1
    }
}